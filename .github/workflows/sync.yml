name: sync

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

concurrency:
  group: sync
  cancel-in-progress: true

jobs:
  find-repos:
    runs-on: ubuntu-latest

    outputs:
      repos: ${{ steps.find-repos.outputs.result }}

    env:
      ARCHIVED: false
      DISABLED: false
      FORKS: false

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Find All Repositories
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        id: find-repos
        with:
          script: |
            core.info(`Finding all repositories for ${context.repo.owner}`)

            const data = await github.paginate(
              github.rest.repos.listForUser,
              { username: context.repo.owner }
            )

            core.info(`Found ${data.length} repositories for ${context.repo.owner}`)

            core.info(`Repositories: ${data.map(repo => repo.name).join(', ')}`)

            core.debug(JSON.stringify(data, null, 2))

            core.info(`Filtering repositories for ${context.repo.owner}`)
            core.debug(`Filteration criteria: !repo.archived && !repo.disabled && !repo.fork`)

            const repos = data.filter(repo => {
              const archived = process.env.ARCHIVED === 'true' ? true : repo.archived
              const disabled = process.env.DISABLED === 'true' ? true : repo.disabled
              const fork = process.env.FORKS === 'true' ? true : repo.fork

              return !archived && !disabled && !fork
            }).map(repo => {
              return {
                owner: repo.owner.login,
                repo: repo.name,
                has_projects: repo.has_projects
              }
            });

            core.info(`Passing ${repos.length} repositories to next jobs`)

            core.debug(JSON.stringify(repos, null, 2))

            core.summary.addRaw(`Found ${repos.length} repositories for ${context.repo.owner}`)

            return repos

  sync-labels:
    runs-on: ubuntu-latest
    needs: find-repos

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Find Outdated Labels
        id: find-outdated-labels
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}

            core.info(`Finding outdated labels for ${repos.length} repositories`)

            const { labels: expectedLabels } = require('${{ github.workspace }}/config/labels.json')

            core.info(`Found ${expectedLabels.length} expected labels from ${{ github.workspace}}/config/labels.json`)

            core.debug(JSON.stringify(expectedLabels, null, 2))

            let deletedLabels = 0
            let createdLabels = 0
            let updatedLabels = 0

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Finding labels for ${repo.owner}/${repo.repo}`)

              const labels = await github.paginate(
                github.rest.issues.listLabelsForRepo,
                { ...repo }
              )

              core.info(`Found ${labels.length} labels for ${repo.owner}/${repo.repo}`)

              core.debug(JSON.stringify(labels, null, 2))

              const labelsToDelete = labels.filter(label => {
                return !expectedLabels.find(expectedLabel => {
                  return expectedLabel.name === label.name
                })
              })

              core.info(`Found ${labelsToDelete.length} labels to delete for ${repo.owner}/${repo.repo}`)

              core.debug(JSON.stringify(labelsToDelete, null, 2))

              const labelsToCreate = expectedLabels.filter(expectedLabel => {
                return !labels.find(label => {
                  return expectedLabel.name === label.name
                })
              })

              core.info(`Found ${labelsToCreate.length} labels to create for ${repo.owner}/${repo.repo}`)

              core.debug(JSON.stringify(labelsToCreate, null, 2))

              const labelsToUpdate = expectedLabels.filter(expectedLabel => {
                return labels.find(label => {
                  return (expectedLabel.name === label.name && expectedLabel.color.replace('#', '') !== label.color) || (expectedLabel.name === label.name && expectedLabel.description !== label.description)
                })
              })

              core.info(`Found ${labelsToUpdate.length} labels to update for ${repo.owner}/${repo.repo}`)

              core.debug(JSON.stringify(labelsToUpdate, null, 2))

              for (const label of labelsToDelete) {
                await github.rest.issues.deleteLabel({
                  ...repo,
                  name: label.name
                })

                core.info(`Deleted label ${label.name} from ${repo.repo.owner}/${repo.repo.repo}`)

                deletedLabels++
              }

              for (const label of labelsToCreate) {
                await github.rest.issues.createLabel({
                  ...repo,
                  ...label,
                  color: label.color.replace('#', '')
                })

                core.info(`Created label ${label.name} in ${repo.repo.owner}/${repo.repo.repo}`)

                createdLabels++
              }

              for (const label of labelsToUpdate) {
                await github.rest.issues.updateLabel({
                  ...repo,
                  ...label,
                  color: label.color.replace('#', '')
                })

                core.info(`Updated label ${label.name} in ${repo.repo.owner}/${repo.repo.repo}`)

                updatedLabels++
              }

              core.info(`Finished syncing labels for ${repo.owner}/${repo.repo}`)
              core.endGroup()
            }

            core.info(`Finished syncing labels for ${repos.length} repositories`)

            core.info(`Deleted: ${deletedLabels} labels`)
            core.info(`Created: ${createdLabels} labels`)
            core.info(`Updated: ${updatedLabels} labels`)

            core.summary.addRaw(`Updated ${updatedLabels} labels, created ${createdLabels} labels, and deleted ${deletedLabels} labels`)

  disable-projects-if-unused:
    runs-on: ubuntu-latest
    needs: find-repos

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Find Projects to Disable
        id: find-projects-to-disable
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}.filter(repo => repo.has_projects)

            core.info(`Finding projects for ${repos.length} repositories`)

            const result = []

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Finding projects for ${repo.owner}/${repo.repo}`)

              const projects = await github.paginate(
                github.rest.projects.listForRepo,
                { ...repo }
              )

              core.info(`Found ${projects.length} projects for ${repo.owner}/${repo.repo}`)

              core.debug(JSON.stringify(projects, null, 2))

              if (projects.length === 0) {
                result.push(repo)
              }

              core.endGroup()
            }

            core.summary.addRaw(`Found ${result.length} repositories with unused project boards`)

            return result

      - name: Disable Projects
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ steps.find-projects-to-disable.outputs.result }}

            core.info(`Disabling projects for ${repos.length} repositories`)

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Disabling projects for ${repo.owner}/${repo.repo}`)

              await github.rest.repos.update({
                ...repo,
                has_projects: false
              })

              core.info(`Disabled projects for ${repo.owner}/${repo.repo}`)

              core.endGroup()
            }

            core.summary.addRaw(`Disabled projects for ${repos.length} repositories`)

  merge-strategies:
    runs-on: ubuntu-latest
    needs: find-repos

    env:
      ALLOW_SQUASH_MERGE: true
      ALLOW_REBASE_MERGE: true
      ALLOW_MERGE_COMMIT: false
      AUTOMERGE_ENABLED: false
      DELETE_BRANCH_ON_MERGE: true
      REQUIRE_WEB_COMMIT_SIGNATURE: true

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set Merge Strategy
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}

            core.info(`Setting merge strategy for ${repos.length} repositories`)

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Setting merge strategy for ${repo.owner}/${repo.repo}`)

              await github.rest.repos.update({
                ...repo,
                allow_squash_merge: process.env.ALLOW_SQUASH_MERGE === 'true',
                allow_rebase_merge: process.env.ALLOW_REBASE_MERGE === 'true',
                allow_merge_commit: process.env.ALLOW_MERGE_COMMIT === 'true',
                automerge_enabled: process.env.AUTOMERGE_ENABLED === 'true',
                delete_branch_on_merge: process.env.DELETE_BRANCH_ON_MERGE === 'true',
                require_commit_signatures: process.env.REQUIRE_WEB_COMMIT_SIGNATURE === 'true'
              })

              core.info(`Set merge strategy for ${repo.owner}/${repo.repo}`)

              core.endGroup()
            }

  sync-rulesets:
    runs-on: ubuntu-latest
    needs: find-repos

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Sync Rulesets
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          SKIP_REPOS: "xkrishguptaa/notes"
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}

            const { rulesets: expectedRulesets } = require('${{ github.workspace}}/config/rulesets.json')

            core.info(`Config has ${expectedRulesets.length} rulesets`)

            core.debug(JSON.stringify(expectedRulesets, null, 2))

            core.info(`Syncing rulesets for ${repos.length} repositories`)

            core.warning(`Skipping ruleset syncing for ${process.env.SKIP_REPOS.split(',').join(', ')}`)

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              if (process.env.SKIP_REPOS.split(',').includes(`${repo.owner}/${repo.repo}`)) {
                core.info(`Skipping ruleset syncing for ${repo.owner}/${repo.repo}`)
                core.endGroup()
                continue
              }

              core.info(`Finding rulesets for ${repo.owner}/${repo.repo}`)

              const { data: rulesets } = await github.rest.repos.getRepoRulesets({
                ...repo
              })

              if (rulesets.length > 0) {
                core.info(`Deleting rulesets for ${repo.owner}/${repo.repo}`)

                for (const ruleset of rulesets) {
                  await github.rest.repos.deleteRepoRuleset({
                    ...repo,
                    ruleset_id: ruleset.id
                  })

                  core.info(`Deleted ruleset ${ruleset.name} for ${repo.owner}/${repo.repo}`)
                }

                core.info(`Deleted rulesets for ${repo.owner}/${repo.repo}`)
              }

              core.info(`Syncing rulesets for ${repo.owner}/${repo.repo}`)

              for (const ruleset of expectedRulesets) {
                await github.rest.repos.createRepoRuleset({
                  ...repo,
                  ...ruleset
                })

                core.info(`Synced ruleset ${ruleset.name} for ${repo.owner}/${repo.repo}`)
              }

              core.info(`Synced rulesets for ${repo.owner}/${repo.repo}`)

              core.endGroup()
            }

  sync-webhooks:
    runs-on: ubuntu-latest
    needs: find-repos

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Sync Webhooks
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}

            const expectedWebhooks = require('${{ github.workspace}}/config/webhooks.js')

            core.info(`Config has ${expectedWebhooks.length} webhooks`)

            const result = []

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Finding webhooks for ${repo.owner}/${repo.repo}`)

              const webhooks = await github.paginate(
                github.rest.repos.listWebhooks,
                { ...repo }
              )

              core.info(`Found ${webhooks.length} webhooks for ${repo.owner}/${repo.repo}`)

              const webhooksToCreate = expectedWebhooks.filter(expectedWebhook => {
                return !webhooks.find(webhook => {
                  return expectedWebhook.config.url === webhook.config.url
                })
              })

              core.info(`Found ${webhooksToCreate.length} webhooks to create for ${repo.owner}/${repo.repo}`)

              const webhooksToUpdate = expectedWebhooks.filter(expectedWebhook => {
                return webhooks.find(webhook => {
                  return (expectedWebhook.config.url === webhook.config.url && expectedWebhook.config.content_type !== webhook.config.content_type) || (expectedWebhook.config.url === webhook.config.url && expectedWebhook.config.secret !== webhook.config.secret)
                })
              })

              core.info(`Found ${webhooksToUpdate.length} webhooks to update for ${repo.owner}/${repo.repo}`)

              for (const webhook of webhooksToCreate) {
                await github.rest.repos.createWebhook({
                  ...repo,
                  ...webhook
                })

                core.info(`Created webhook a webhook in ${repo.repo.owner}/${repo.repo.repo}`)
              }

              for (const webhook of webhooksToUpdate) {
                await github.rest.repos.updateWebhook({
                  ...repo,
                  ...webhook
                })

                core.info(`Updated webhook a webhook in ${repo.repo.owner}/${repo.repo.repo}`)
              }

              core.info(`Synced webhooks for ${repo.owner}/${repo.repo}`)

              core.endGroup()
            }

            core.info(`Synced webhooks for ${repos.length} repositories`)

            core.summary.addRaw(`Synced webhooks for ${repos.length} repositories`)

  sync-action-permissions:
    runs-on: ubuntu-latest
    needs: find-repos

    env:
      DEFAULT_WORKFLOW_PERMISSIONS: write
      CAN_APPROVE_PULL_REQUEST_REVIEWS: true

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Sync Action Permissions
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}

            core.info(`Syncing action permissions for ${repos.length} repositories`)

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Syncing action permissions for ${repo.owner}/${repo.repo}`)

              await github.rest.actions.setGithubActionsDefaultWorkflowPermissionsRepository({
                ...repo,
                default_workflow_permissions: process.env.DEFAULT_WORKFLOW_PERMISSIONS,
                can_approve_pull_requests: process.env.CAN_APPROVE_PULL_REQUEST_REVIEWS === 'true'
              })

              core.info(`Synced action permissions for ${repo.owner}/${repo.repo}`)

              core.endGroup()
            }

            core.info(`Synced action permissions for ${repos.length} repositories`)

            core.summary.addRaw(`Synced action permissions for ${repos.length} repositories`)

  verify-readme:
    runs-on: ubuntu-latest
    needs: find-repos

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Check Readme
        id: check-readme
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const fs = require('node:fs')

            const repos = ${{ needs.find-repos.outputs.repos }}

            core.info(`Checking readme for ${repos.length} repositories`)

            io.mkdirP(`${{ github.workspace }}/tmp`)

            const result = []

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Checking readme for ${repo.owner}/${repo.repo}`)

              await exec.exec('git', ['clone', `https://github.com/${repo.owner}/${repo.repo}`, `${{ github.workspace }}/tmp/${repo.repo}`])

              const readme = fs.readdirSync(`${{ github.workspace }}/tmp/${repo.repo}`).filter(file => file.toLowerCase().startsWith('readme'))

              if (readme.length !== 0) {
                core.info(`Readme found for ${repo.owner}/${repo.repo}`)
                core.endGroup()
                continue
              }

              core.info(`Readme not found for ${repo.owner}/${repo.repo}`)

              result.push(repo)

              core.endGroup()
            }

            core.info(`Found ${result.length} repositories without a readme`)

            return result

      - name: Create Issue
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7

        env:
          ISSUE_TITLE: "[Documentation]: Create Readme"
          ISSUE_LABEL: "📝 aspect: text"
          ISSUE_BODY: |
            No readme was found in this repository. We should add a readme to this repository to explain what it is and how to use it.

            We can refer to readme's from other repositories under [this account](https://github.com/${{github.repository_owner}}) to get inspiration.

            Here are the following READMEs we can take the structure from: [xkrishguptaa/reseter.css](https://github.com/xkrishguptaa/reseter.css) or [xkrishguptaa/go-todo-api](https://github.com/xkrishguptaa/go-todo-api)

            | Example | Repository |
            | --- | --- |
            | ![xkrishguptaa/reseter.css](https://github.com/xkrishguptaa/open-source/assets/135469703/243187de-1fc6-423b-93d4-0ba77e291daf) | [xkrishguptaa/reseter.css](https://github.com/xkrishguptaa/reseter.css) |
            | ![xkrishguptaa/go-todo-api](https://github.com/xkrishguptaa/open-source/assets/135469703/f4b399bb-160b-4045-8f2d-cff9d627dcc7) | [xkrishguptaa/go-todo-api](https://github.com/xkrishguptaa/reseter.css) |

            If you have any questions, please reach out to me.

            <details>
              <summary>📝 What is a readme?</summary>

              A readme is a file that explains what a repository is and how to use it. It is the first thing people see when they visit a repository. It is important to have a readme so people know what your repository is and how to use it.
            </details>

            <details>
              <summary>🤔 How do I create a readme?</summary>

              Here is a <a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-readmes">guide</a> on how to create a readme.

              Please take inspiration from the READMEs mentioned above.
            </details>

            <details>
              <summary>✍🏻 What should I put in the readme?</summary>

              Here is a <a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-readmes">guide</a> on what to put in a readme.
            </details>

            Thank you for your help! 🙏🏻 If you require any assistance, please reach out to me.
            P.S. This is an [automated issue](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}).

        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ steps.check-readme.outputs.result }}

            core.info(`Creating issue for ${repos.length} repositories`)

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Creating issue for ${repo.owner}/${repo.repo}`)

              const issueAlreadyExists = await github.paginate(
                github.rest.issues.listForRepo,
                { ...repo, labels: process.env.ISSUE_LABEL }
              ).then(issues => {
                return issues.find(issue => {
                  return issue.title === process.env.ISSUE_TITLE && issue.state === 'open'
                })
              })

              if (issueAlreadyExists) {
                core.info(`Issue already exists for ${repo.owner}/${repo.repo}`)
                continue
              }

              const issue = await github.rest.issues.create({
                ...repo,
                title: process.env.ISSUE_TITLE,
                body: process.env.ISSUE_BODY,
                labels: process.env.ISSUE_LABEL.split(',').map(label => label.trim())
              })

              core.info(`Created issue for ${repo.owner}/${repo.repo}`)

              core.info(`Issue: ${issue.data.html_url}`)

              core.endGroup()
            }

            core.info(`Created issue for ${repos.length} repositories`)

            core.summary.addRaw(`Created issue for ${repos.length} repositories`)

  verify-license:
    runs-on: ubuntu-latest
    needs: find-repos

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Check License
        id: check-license
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}

            const fs = require('node:fs')

            core.info(`Checking license for ${repos.length} repositories`)

            io.mkdirP(`${{ github.workspace }}/tmp`)

            const result = []

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              core.info(`Checking license for ${repo.owner}/${repo.repo}`)

              await exec.exec('git', ['clone', `https://github.com/${repo.owner}/${repo.repo}`, `${{ github.workspace }}/tmp/${repo.repo}`])

              const license = fs.readdirSync(`${{ github.workspace }}/tmp/${repo.repo}`).filter(file => file.toLowerCase().startsWith('license'))

              if (license.length !== 0) {
                core.info(`License found for ${repo.owner}/${repo.repo}`)
                continue
              }

              core.info(`License not found for ${repo.owner}/${repo.repo}`)

              result.push(repo)

              core.endGroup()
            }

            return result

      - name: Create Issue
        id: create-issue
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          ISSUE_TITLE: "[Documentation]: Create License"
          ISSUE_LABEL: "📝 aspect: text"
          ISSUE_BODY: |
            No license was found in this repository. We should add a license to this repository to explain how people can use this repository.

            Please use the license found in the [community health files](https://github.com/${{github.repository_owner}}/.github) of this account.

            The liecense should be placed in the root of the repository and should be named `LICENSE`.

            If you have any questions, please reach out to me.

            Here is a [guide](https://docs.github.com/en/github/building-a-strong-community/adding-a-license-to-a-repository) on how to add a license to a repository.

            Thank you for your help! 🙏🏻 If you require any assistance, please reach out to me.

            P.S. This is an [automated issue](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}).

        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ steps.check-license.outputs.result }}

            core.info(`Creating issue for ${repos.length} repositories`)

            for (const repo of repos) {
              core.startGroup(`${repo.owner}/${repo.repo}`)

              const issueAlreadyExists = await github.paginate(
                github.rest.issues.listForRepo,
                { ...repo, labels: process.env.ISSUE_LABEL }
              ).then(issues => {
                return issues.find(issue => {
                  return issue.title === process.env.ISSUE_TITLE && issue.state === 'open'
                })
              })

              if (issueAlreadyExists) {
                core.info(`Issue already exists for ${repo.owner}/${repo.repo}`)
                continue
              }

              const issue = await github.rest.issues.create({
                ...repo,
                title: process.env.ISSUE_TITLE,
                body: process.env.ISSUE_BODY,
                labels: process.env.ISSUE_LABEL.split(',').map(label => label.trim())
              })

              core.info(`Created issue for ${repo.owner}/${repo.repo}`)

              core.info(`Issue: ${issue.data.html_url}`)

              core.endGroup()
            }
